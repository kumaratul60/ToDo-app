{"version":3,"sources":["firebase.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","timestamp","FieldValue","serverTimestamp","merge","List","Container","maxWidth","Grid","container","ListItem","ListItemText","primary","delete","App","todos","setTodos","console","log","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","preventDefault","add","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b13c8212.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyBQVzU0aZCVsiBAgatAQycDQEorj18Qw4M\",\r\n  authDomain: \"todo-app-dad9c.firebaseapp.com\",\r\n  projectId: \"todo-app-dad9c\",\r\n  storageBucket: \"todo-app-dad9c.appspot.com\",\r\n  messagingSenderId: \"490646945795\",\r\n  appId: \"1:490646945795:web:648514000a3c52c3920e36\",\r\n  measurementId: \"G-J9VPPNGDNT\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Modal,\r\n  Grid,\r\n  Container,\r\n} from \"@material-ui/core\";\r\n\r\nimport db from \"./firebase\";\r\nimport DeleteForeverSharpIcon from \"@material-ui/icons/DeleteForeverSharp\";\r\nimport EditOutlined from \"@material-ui/icons/EditOutlined\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport firebase from \"firebase\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #00\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Todo(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [input, setInput] = useState();\r\n\r\n  const updateTodo = () => {\r\n    // update the todo with new input text\r\n\r\n    db.collection(\"todos\").doc(props.todo.id).set(\r\n      {\r\n        todo: input,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      },\r\n      { merge: true }\r\n    );\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal open={open} onClose={(e) => setOpen(false)}>\r\n        <div className={classes.paper}>\r\n          <h3>Edit the todo</h3>\r\n          <input\r\n            placeholder={props.todo.todo}\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n          />\r\n          <Button onClick={updateTodo}> Update Todo</Button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <List>\r\n      <Container maxWidth=\"md\">\r\n        <Grid container spacing={2}>\r\n       \r\n          <ListItem>\r\n            {/*  props.todo.todo == props.text.object */}\r\n\r\n            <ListItemText\r\n              primary={props.todo.todo}\r\n              // secondary=\"Dummy secondary value ⏰ \"\r\n            />\r\n\r\n            <EditOutlined onClick={(e) => setOpen(true)} />\r\n            <DeleteForeverSharpIcon\r\n              onClick={(event) =>\r\n                db.collection(\"todos\").doc(props.todo.id).delete()\r\n              }\r\n            ></DeleteForeverSharpIcon>\r\n          </ListItem>\r\n          \r\n        </Grid>\r\n      </Container>\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Button, FormControl, InputLabel, Input } from \"@material-ui/core\";\nimport Todo from \"./Todo\";\nimport \"./App.css\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n  console.log(\"👽\", input);\n\n  // when the app loads, we need to listen to the database and fetch new todos as they get added/removed\n\n  //useEffect(fuction,dependencies)  -> it load when corresponding file run\n\n  useEffect(() => {\n    // this code here... fires when App.js load\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        //  console.log(snapshot.docs.map(doc => doc.data()));   // console.log return array of object\n        setTodos(\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\n        ); // it is a flat array of string with no onject\n      });\n  }, []);\n\n  const addToDo = (event) => {\n    //this will fire off when we click the button\n    event.preventDefault(); // It will stop from Refesh or preventing from submit\n\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setTodos([...todos, input]);\n    setInput(\"\"); // clear up the input after clicking add todo button\n    console.log(todos);\n  };\n  return (\n    <div className=\"App\">\n      <h1>Todo-App🚀 </h1>\n      <form>\n        <FormControl>\n          <InputLabel> Write a Todo ✅</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </FormControl>\n        <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={addToDo}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add todo{\" \"}\n        </Button>\n      </form>\n\n      <ul>\n        {/* so todo fuction is no longer string now so change it to  <Todo todo = {todo}/> from  <Todo text = {todo}/> */}\n        {todos.map((todo) => (\n          <Todo todo={todo} />\n          // <li>{todo}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}